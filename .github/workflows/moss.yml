name: Moss

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-on-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Check Commit Message
      uses: gsactions/commit-message-checker@v1
      with:
        pattern: '(\[[\.\w\d\s_-]+\])+ .+$'
        flags: 'gm'
        error: 'Your first line has to contain a commit type like "[abc] commit message."'
        excludeDescription: 'true' # optional: this excludes the description body of a pull request
        excludeTitle: 'true' # optional: this excludes the title of a pull request
        checkAllCommitMessages: 'true' # optional: this checks all commits associated with a pull request
        accessToken: ${{ secrets.GITHUB_TOKEN }} # github access token is only required if checkAllCommitMessages is true

    - uses: actions/checkout@v2
    - name: Run clang-format style check for C/C++ programs.
      uses: jidicula/clang-format-action@v4.6.2
      with:
        clang-format-version: '14'
        check-path: 'SourceCode'
        fallback-style: 'LLVM' # optional

    - name: Build In Docker
      shell: bash
      working-directory: ${{runner.workspace}}/${{github.event.repository.name}}/Docker
      run: docker-compose run moss-build -c

    - uses: actions/upload-artifact@v2
      with:
        name: build-on-linux-${{env.BUILD_TYPE}}
        path: ${{runner.workspace}}/

# disable build-on-mac, because 1 macOS minute counts as 10 regular minutes, enable this build when necessary
  build-on-mac:
    if: false # change it to true to build on mac
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-10.15

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Check Commit Message
        uses: gsactions/commit-message-checker@v1
        with:
          pattern: '(\[[\.\w\d\s_-]+\])+ .+$'
          flags: 'gm'
          error: 'Your first line has to contain a commit type like "[abc] commit message."'
          excludeDescription: 'true' # optional: this excludes the description body of a pull request
          excludeTitle: 'true' # optional: this excludes the title of a pull request
          checkAllCommitMessages: 'true' # optional: this checks all commits associated with a pull request
          accessToken: ${{ secrets.GITHUB_TOKEN }} # github access token is only required if checkAllCommitMessages is true

      - uses: actions/checkout@v2
      - name: Run clang-format style check for C/C++ programs.
        uses: jidicula/clang-format-action@v4.6.2
        with:
          clang-format-version: '14'
          check-path: 'SourceCode'
          fallback-style: 'LLVM' # optional

      - name: Install Dependencies
        shell: bash
        run: brew install iwyu llvm

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: export PATH="/usr/local/opt/llvm/bin:$PATH" && cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/CMake/Toolchain/ToolchainClang.cmake -DCONFIG_BOARD=rpi3 ..

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: export PATH="/usr/local/opt/llvm/bin:$PATH" && cmake --build . --config $BUILD_TYPE

      - uses: actions/upload-artifact@v2
        with:
          name: build-on-mac-${{env.BUILD_TYPE}}
          path: ${{runner.workspace}}/
